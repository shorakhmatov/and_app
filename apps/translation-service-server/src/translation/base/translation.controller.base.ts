/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TranslationService } from "../translation.service";
import { TranslationCreateInput } from "./TranslationCreateInput";
import { Translation } from "./Translation";
import { TranslationFindManyArgs } from "./TranslationFindManyArgs";
import { TranslationWhereUniqueInput } from "./TranslationWhereUniqueInput";
import { TranslationUpdateInput } from "./TranslationUpdateInput";

export class TranslationControllerBase {
  constructor(protected readonly service: TranslationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Translation })
  async createTranslation(
    @common.Body() data: TranslationCreateInput
  ): Promise<Translation> {
    return await this.service.createTranslation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Translation] })
  @ApiNestedQuery(TranslationFindManyArgs)
  async translations(@common.Req() request: Request): Promise<Translation[]> {
    const args = plainToClass(TranslationFindManyArgs, request.query);
    return this.service.translations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Translation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async translation(
    @common.Param() params: TranslationWhereUniqueInput
  ): Promise<Translation | null> {
    const result = await this.service.translation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Translation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTranslation(
    @common.Param() params: TranslationWhereUniqueInput,
    @common.Body() data: TranslationUpdateInput
  ): Promise<Translation | null> {
    try {
      return await this.service.updateTranslation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Translation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTranslation(
    @common.Param() params: TranslationWhereUniqueInput
  ): Promise<Translation | null> {
    try {
      return await this.service.deleteTranslation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
